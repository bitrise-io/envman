format_version: "11"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: other

app:
  envs:
  - BIN_NAME: envman

workflows:
  test:
    after_run:
    - run_integration_tests
    title: Runs tests
    steps:
    - go-list: { }
    - golint: { }
    - errcheck: { }
    - go-test: { }
    - codecov:
        run_if: .IsCI
        inputs:
        - other_options: -f ${GO_CODE_COVERAGE_REPORT_PATH}
        - CODECOV_TOKEN: "$CODECOV_UPLOAD_TOKEN"

  run_integration_tests:
    steps:
    - script:
        title: Run integration tests
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex

            current_envman="$(pwd)/_tmp/test_envman"
            export CGO_ENABLED=0
            go build -o "$current_envman"

            export PR="" PULL_REQUEST_ID=""
            export INTEGRATION_TEST_BINARY_PATH="$current_envman"

            # prevent the env var content (with the content of this script)
            # being added to the test process environment
            unset content
            go test -v ./_tests/integration/...

  create-release:
    description: Creates Linux and Darwin binaries, then publishes a GitHub release
    envs:
    - GITHUB_TOKEN: $GIT_BOT_USER_ACCESS_TOKEN # Goreleaser expects this env var
    steps:
    - script:
        title: Goreleaser (create binaries + publish to GH)
        deps:
          brew:
          - name: goreleaser
        inputs:
        - content: |
            #!/usr/bin/env bash
            set -ex

            goreleaser release

  test-binary-build:
    description: Tests the release build process by creating a snapshot release (without publishing)
    steps:
    - script:
        title: Goreleaser (create snapshot binaries)
        deps:
          brew:
          - name: goreleaser
        inputs:
        - content: |
            #!/usr/bin/env bash
            set -ex

            goreleaser release --snapshot --rm-dist
